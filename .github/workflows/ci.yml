name: CI

on:
  push:
  pull_request:
  schedule:
    - cron: "30 7 * * *" # 7:30 every day

permissions:
  contents: read

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    if:
      "!contains(github.event.head_commit.message, '[ci skip]') &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !startsWith(github.event.head_commit.message, 'docs')"

    steps:
      - name: Clone the source code
        uses: actions/checkout@v4.2.2

      - name: Set up the Go toolchain
        uses: actions/setup-go@v5.5.0
        with:
          go-version-file: go.mod

      - name: Verify and download dependencies
        run: |
          go mod verify
          go mod download

      - name: Extract the golangci-lint version
        run: |
          GOLANGCI_LINT_VERSION="$(grep '^GOLANGCI_LINT_VERSION' Makefile | cut -d '=' -f2 | xargs)"
          echo "GOLANGCI_LINT_VERSION=${GOLANGCI_LINT_VERSION}" >> "${GITHUB_ENV}"

      - name: Run the linter
        uses: golangci/golangci-lint-action@v8.0.0
        with:
          version: v${{ env.GOLANGCI_LINT_VERSION }}

  unit-tests:
    name: Unit tests
    if:
      "!contains(github.event.head_commit.message, '[ci skip]') &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !startsWith(github.event.head_commit.message, 'docs')"
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest

    steps:
      - name: Clone the source code
        uses: actions/checkout@v4.2.2

      - name: Install the Go toolchain
        uses: actions/setup-go@v5.5.0
        with:
          go-version-file: go.mod

      - name: Display the platform information for Go
        run: |
          go env GOOS
          go env GOARCH
          go version

      - name: Verify and download dependencies
        run: |
          go mod verify
          go mod download

      - name: Run the unit tests
        run: make test GOFLAGS="-v"

  race-tests:
    name: Race tests
    if:
      "!contains(github.event.head_commit.message, '[ci skip]') &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !startsWith(github.event.head_commit.message, 'docs')"
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest

    steps:
      - name: Clone the source code
        uses: actions/checkout@v4.2.2

      - name: Install the Go toolchain
        uses: actions/setup-go@v5.5.0
        with:
          go-version-file: go.mod

      - name: Display the platform information for Go
        run: |
          go env GOOS
          go env GOARCH
          go version

      - name: Verify and download dependencies
        run: |
          go mod verify
          go mod download

      - name: Run the tests
        run: make test GOFLAGS="-race -v"

  bench:
    name: Benchmarks
    if:
      "!contains(github.event.head_commit.message, '[ci skip]') &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !startsWith(github.event.head_commit.message, 'docs')"
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest

    steps:
      - name: Clone the source code
        uses: actions/checkout@v4.2.2

      - name: Install the Go toolchain
        uses: actions/setup-go@v5.5.0
        with:
          go-version-file: go.mod

      - name: Display the platform information for Go
        run: |
          go env GOOS
          go env GOARCH
          go version

      - name: Verify and download dependencies
        run: |
          go mod verify
          go mod download

      - name: Run the benchmarks
        run: make bench GOFLAGS="-benchmem"

  fuzz:
    name: Fuzz tests
    if:
      "!contains(github.event.head_commit.message, '[ci skip]') &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !startsWith(github.event.head_commit.message, 'docs')"
    runs-on: ${{ matrix.os }}
    env:
      CACHE_KEY: fuzz

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest

    steps:
      - name: Clone the source code
        uses: actions/checkout@v4.2.2

      - name: Install the Go toolchain
        uses: actions/setup-go@v5.5.0
        with:
          cache: false
          go-version-file: go.mod

      - name: Get Go cache path
        id: go-cache-path
        run: echo "go-cache=$(go env GOCACHE)" >> "${GITHUB_OUTPUT}"

      - name: Restore Cache
        id: cache-restore
        uses: actions/cache/restore@v4.2.3
        with:
          path: ${{ steps.go-cache-path.outputs.go-cache }}
          key: ${{ env.CACHE_KEY }}

      - name: Make a fuzz
        run: make fuzz

      - name: Delete previous cache
        if: ${{ steps.cache-restore.outputs.cache-hit }}
        continue-on-error: true
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete "${{ env.CACHE_KEY }}" --confirm
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Save cache
        uses: actions/cache/save@v4.2.3
        with:
          path: ${{ steps.go-cache-path.outputs.go-cache }}
          key: ${{ env.CACHE_KEY }}
